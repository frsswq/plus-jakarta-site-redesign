---
const fontWeights = [
  { label: "ExtraLight", value: 200 },
  { label: "Light", value: 300 },
  { label: "Regular", value: 400 },
  { label: "Medium", value: 500 },
  { label: "SemiBold", value: 600 },
  { label: "Bold", value: 700 },
  { label: "ExtraBold", value: 800 },
];

const stylisticSets = [1, 2, 3];
const toolkitStyle = "flex items-center gap-2 rounded-sm border-1 px-3 py-2";
---

<section class="fixed-container flex flex-col px-6">
  <div class="rounded-lg border-1 border-zinc-800 p-4">
    <div class="flex flex-col gap-y-4">
      <!-- Font Weight Controls -->
      <div class="flex flex-wrap items-center gap-4">
        <select
          id="weight-selector"
          class={`${toolkitStyle} appearance-none font-bold focus:outline-none`}
        >
          {
            fontWeights.map((weight) => (
              <option value={weight.value} selected={weight.value === 800}>
                {weight.label}
              </option>
            ))
          }
        </select>

        <div class={toolkitStyle}>
          <label for="font-weight-slider" class="font-bold">Weight</label>
          <input
            id="font-weight-slider"
            type="range"
            min="200"
            max="800"
            step="1"
            value="800"
          />
          <output id="font-weight-value" class="tabular-nums">800</output>
        </div>

        <div class={toolkitStyle}>
          <label class="cursor-pointer font-bold select-none">
            <input
              id="font-italic-checkbox"
              type="checkbox"
              class="h-3 w-3 cursor-pointer appearance-none rounded-full border-1 border-zinc-500
                select-none checked:bg-zinc-500"
            />
            Italic
          </label>
        </div>
      </div>

      <!-- Size & Spacing Controls -->
      <div class="flex flex-wrap gap-4">
        <div class={toolkitStyle}>
          <label for="font-size-slider" class="font-bold">Size</label>
          <input
            id="font-size-slider"
            type="range"
            min="10"
            max="300"
            step="1"
            value="96"
          />
          <output id="font-size-value" class="tabular-nums">96</output>
        </div>

        <div class={toolkitStyle}>
          <label for="font-leading-slider" class="font-bold">Leading</label>
          <input
            id="font-leading-slider"
            type="range"
            min="0.5"
            max="3"
            step="0.1"
            value="1"
          />
          <output id="font-leading-value" class="tabular-nums">1</output>
        </div>

        <div class={toolkitStyle}>
          <label for="font-spacing-slider" class="font-bold">Spacing</label>
          <input
            id="font-spacing-slider"
            type="range"
            min="-5"
            max="20"
            step="1"
            value="0"
          />
          <output id="font-spacing-value" class="tabular-nums">0</output>
        </div>
      </div>

      <!-- Stylistic Sets -->
      <div class="flex flex-wrap gap-4">
        <div class={toolkitStyle}>
          <span class="font-bold">Stylistic Sets</span>
          {
            stylisticSets.map((num) => (
              <label class="flex items-center gap-1">
                <input
                  type="checkbox"
                  class="font-alternates-checkbox h-3 w-3 cursor-pointer appearance-none rounded-full
                    border-1 border-zinc-500 checked:bg-zinc-500"
                  data-feature={`ss0${num}`}
                />
                <span class="cursor-pointer tabular-nums select-none">
                  {num.toString().padStart(2, "0")}
                </span>
              </label>
            ))
          }
        </div>
      </div>
    </div>

    <!-- Preview Text -->
    <p
      id="weight-showcase"
      class="h-fit w-full px-4 py-12 text-center text-8xl font-extrabold whitespace-normal
        text-red-500 focus:outline-none"
      contenteditable="true"
    >
      AaBbCcDdEeFf GgHhIiJjKkLlMm NnOoPpQqRrSs TtUuVvWwXxYyZz 0123456789 &â†’!
    </p>
  </div>
</section>

<script>
  function getElement(id: string) {
    const el = document.getElementById(id);
    if (!el) console.error(`Element #${id} not found`);
    return el;
  }

  document.addEventListener("DOMContentLoaded", () => {
    // Elements
    const weightShowcase = getElement(
      "weight-showcase",
    ) as HTMLParagraphElement;
    const selectElement = getElement("weight-selector") as HTMLSelectElement;
    const fontWeightSlider = getElement(
      "font-weight-slider",
    ) as HTMLInputElement;
    const fontWeightValue = getElement(
      "font-weight-value",
    ) as HTMLOutputElement;
    const fontItalicCheckbox = getElement(
      "font-italic-checkbox",
    ) as HTMLInputElement;
    const fontSizeSlider = getElement("font-size-slider") as HTMLInputElement;
    const fontSizeValue = getElement("font-size-value") as HTMLOutputElement;
    const fontLeadingSlider = getElement(
      "font-leading-slider",
    ) as HTMLInputElement;
    const fontLeadingValue = getElement(
      "font-leading-value",
    ) as HTMLOutputElement;
    const fontSpacingSlider = getElement(
      "font-spacing-slider",
    ) as HTMLInputElement;
    const fontSpacingValue = getElement(
      "font-spacing-value",
    ) as HTMLOutputElement;
    const fontAlternatesCheckboxes = document.querySelectorAll(
      ".font-alternates-checkbox",
    ) as NodeListOf<HTMLInputElement>;

    // Event Handlers
    const updateFontFeatureSettings = () => {
      const activeFeatures = Array.from(
        document.querySelectorAll(".font-alternates-checkbox:checked"),
      ).map(
        (checkbox) => `"${(checkbox as HTMLInputElement).dataset.feature}"`,
      );

      weightShowcase.style.fontFeatureSettings = activeFeatures.length
        ? activeFeatures.join(", ")
        : "normal";
    };

    // Event Listeners
    selectElement.addEventListener("change", () => {
      const value = selectElement.value;
      weightShowcase.style.fontWeight = value;
      fontWeightSlider.value = value;
      fontWeightValue.textContent = value;
    });

    fontWeightSlider.addEventListener("input", () => {
      const value = fontWeightSlider.value;
      weightShowcase.style.fontWeight = value;
      fontWeightValue.textContent = value;
      selectElement.value = value;
    });

    fontItalicCheckbox.addEventListener("change", () => {
      weightShowcase.style.fontStyle = fontItalicCheckbox.checked
        ? "italic"
        : "normal";
    });

    fontSizeSlider.addEventListener("input", () => {
      const value = fontSizeSlider.value;
      weightShowcase.style.fontSize = `${value}px`;
      fontSizeValue.textContent = value;
    });

    fontLeadingSlider.addEventListener("input", () => {
      const value = fontLeadingSlider.value;
      weightShowcase.style.lineHeight = value;
      fontLeadingValue.textContent = value;
    });

    fontSpacingSlider.addEventListener("input", () => {
      const value = fontSpacingSlider.value;
      weightShowcase.style.letterSpacing = `${value}px`;
      fontSpacingValue.textContent = value;
    });

    fontAlternatesCheckboxes.forEach((checkbox) => {
      checkbox.addEventListener("change", updateFontFeatureSettings);
    });
  });
</script>
